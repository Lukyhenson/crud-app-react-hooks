{"version":3,"sources":["components/forms/AddUserForm.jsx","components/forms/EditUserForm.jsx","components/tables/UserTable.jsx","App.js","serviceWorker.js","index.js"],"names":["AddUserForm","props","initialFormState","id","name","username","_useState","useState","_useState2","Object","slicedToArray","user","setUser","handleInputChange","event","_event$target","target","value","objectSpread","defineProperty","react_default","a","createElement","onSubmit","preventDefault","addUser","type","placeholder","onChange","EditUserForm","currentUser","updateUser","onClick","setEditing","className","UserTable","users","length","map","_ref","key","editUser","deleteUser","colSpan","App","setUsers","_useState3","_useState4","editing","_useState5","_useState6","setCurrentUser","forms_EditUserForm","updatedUser","forms_AddUserForm","concat","toConsumableArray","tables_UserTable","userId","filter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2efc8da6.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst AddUserForm = props => {\n  const initialFormState = {\n    id: null,\n    name: '',\n    username: ''\n  }\n\n  const [user, setUser] = useState(initialFormState)\n\n  const handleInputChange = event => {\n    const { name, value } = event.target\n\n    setUser({...user, [name]: value})\n  } \n\n  return (\n    <form onSubmit={event => {\n      const { name, username } = user\n      event.preventDefault()\n      \n      if (!name || !username) return\n      \n      props.addUser(user)\n      setUser(initialFormState)\n    }}>\n      <label>Name</label>\n      <input type=\"text\" name=\"name\" value={user.name} placeholder=\"Put here the name\" onChange={handleInputChange} />\n      <label>Username</label>\n      <input type=\"text\" name=\"username\" value={user.username} placeholder=\"Put here the username\" onChange={handleInputChange} />\n      <button>Add new user</button>\n    </form>\n  )\n}\n\nexport default AddUserForm\n","import React, { useState } from 'react'\n\nconst EditUserForm = props => {\n  const [user, setUser] = useState(props.currentUser)\n\n  const handleInputChange = event => {\n    const { name, value } = event.target\n\n    setUser({...user, [name]: value})\n  } \n\n  return (\n    <div>\n      <h2>Editing user: #{user.id}</h2>\n      <hr/>\n      <form onSubmit={event => {\n        event.preventDefault()\n\n        props.updateUser(user.id, user)\n      }}>\n        <label>Name</label>\n        <input type=\"text\" name=\"name\" value={user.name} placeholder=\"Put here the name\" onChange={handleInputChange} />\n        <label>Username</label>\n        <input type=\"text\" name=\"username\" value={user.username} placeholder=\"Put here the username\" onChange={handleInputChange} />\n        <div>\n          <button>Update user</button>\n          <button onClick={() => props.setEditing(false)} className=\"button muted-button\">Cancel</button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default EditUserForm\n","import React from 'react'\n\nconst UserTable = props => (\n  <table>\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Username</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      { \n        props.users.length > 0 ? (\n          props.users.map(({name, username, id}) => (\n            <tr key={id}>\n              <td>{name}</td>\n              <td>{username}</td>\n              <td>\n                <button className=\"button muted-button\" onClick={() => props.editUser({id, name, username})}>Edit</button>\n                <button className=\"button muted-button\" onClick={() => props.deleteUser(id)}>Delete</button>\n              </td>\n            </tr>\n          ))\n        ) : (\n          <tr>\n            <td colSpan={3}>No users</td>\n          </tr>\n        )\n      }\n    </tbody>\n  </table>\n)\n\nexport default UserTable\n","import React, { useState } from 'react'\n\nimport AddUserForm from './components/forms/AddUserForm'\nimport EditUserForm from './components/forms/EditUserForm';\nimport UserTable from './components/tables/UserTable'\n\nconst App = () => {\n  const usersData = [\n    { id: 1, name: 'Tauan Tathiell', username: 'lukyhenson' },\n    { id: 2, name: 'Jonatas Rancan', username: 'jonatas.rancan' },\n    { id: 3, name: 'Jonathan Bruno', username: 'jonathan.bruno' }\n  ]\n\n  const [users, setUsers] = useState(usersData)\n  \n  const [editing, setEditing] = useState(false)\n\n  const initialFormState = { id: null, name: '', username: '' }\n\n  const [currentUser, setCurrentUser] = useState(initialFormState)\n\n  const addUser = user => {\n    user.id = users.length + 1\n    setUsers([...users, user])\n  }\n\n  const editUser = user => {\n    const { id, name, username } = user \n\n    setEditing(true)\n    setCurrentUser({ id, name, username })\n  }\n\n  const updateUser = (id, updatedUser) => {\n    setEditing(false)\n    setUsers(users.map(user => (user.id === id ? updateUser : user)))\n  }\n\n  const deleteUser = userId => {\n    setUsers(users.filter(({id}) => id !== userId))\n  }\n\n  return (\n    <div className=\"container\">\n      <h1>CRUD app using hooks</h1>\n      <div className=\"flex-row\">\n        <div className=\"flex-large\">\n          {\n            editing ? (\n              <div>\n                <EditUserForm editing={editing} setEditing={setEditing} currentUser={currentUser} updateUser={updateUser}/>\n              </div>\n            ) : (\n              <div>\n                <h2>Add user</h2>\n                <hr/>\n                <AddUserForm addUser={addUser}/>\n              </div>\n            )\n          }\n        </div>\n        <div className=\"flex-large\">\n          <h2>View users</h2>\n          <hr/>\n          <UserTable users={users} editUser={editUser} deleteUser={deleteUser} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}